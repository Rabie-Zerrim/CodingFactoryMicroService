import { Component, OnInit } from '@angular/core';
import { AssessmentService } from '../services/assessment.service';
import { Assessment } from '../models/assessment.model';
import { Partnership } from '../models/partnership';  // Import Partnership model

@Component({
  selector: 'app-assessment-list',
  templateUrl: './assessment-list.component.html',
})
export class AssessmentListComponent implements OnInit {
  assessments: Assessment[] = [];
  partnerships: Partnership[] = []; // To store partnerships
  selectedAssessment: Assessment | null = null;
  selectedPartnershipId: number = 0; // To store selected partnershipId
  errorMessage: string = '';
    assessment: any;

  constructor(private assessmentService: AssessmentService) {}

  ngOnInit(): void {
    // Load assessments from the backend
    this.loadAssessments();
    // Load partnerships from the backend
    this.loadPartnerships();
  }

  loadAssessments(): void {
    this.assessmentService.getAllAssessments().subscribe(
      (assessments) => {
        this.assessments = assessments;
      },
      (error) => {
        this.errorMessage = `Error: ${error.message}`;
      }
    );
  }

  loadPartnerships(): void {
    this.assessmentService.getAllPartnerships().subscribe(
      (partnerships) => {
        this.partnerships = partnerships;
      },
      (error) => {
        this.errorMessage = `Error: ${error.message}`;
      }
    );
  }

  createAssessment(): void {
    if (!this.selectedPartnershipId || !this.assessment.score) {
      this.errorMessage = 'Please select a partnership and provide a score.';
      return;
    }
  
    // Prepare the assessment object based on the backend structure
    const newAssessment: any = {
      idAssessment: 0, // This will be auto-generated by the backend
      acceptanceStatus: 'Pending', // Adjust as needed
      adminAcceptance: false, // Default value
      partnerAacceptance: false, // Default value
      score: this.assessment.score, // Get score from the form input (this.assessment)
      feedback: this.assessment.feedback, // Feedback from form
      partnershipId: this.selectedPartnershipId, // Use the selected partnership ID
    };
  
    // Call the service to send the data to the backend
    this.assessmentService.createAssessment(newAssessment).subscribe(
      (createdAssessment) => {
        this.assessments.push(createdAssessment); // Correctly push the new assessment to the array
        this.selectedPartnershipId = 0; // Reset the dropdown
        this.assessment = { // Reset the assessment form
          score: 0,
          feedback: '',
          partnershipId: 0
        };
      },
      (error) => {
        console.error('Error creating assessment:', error);
        if (error.error && error.error.message) {
          this.errorMessage = `Error: ${error.error.message}`;
        } else {
          this.errorMessage = 'There was an error creating the assessment. Please try again.';
        }
      }
    );
  }
  
}
